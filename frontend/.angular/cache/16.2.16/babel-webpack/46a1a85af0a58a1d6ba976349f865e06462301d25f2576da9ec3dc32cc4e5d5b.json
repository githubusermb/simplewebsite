{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let CartComponent = class CartComponent {\n  constructor(cartService, authService, router) {\n    this.cartService = cartService;\n    this.authService = authService;\n    this.router = router;\n    this.isLoading = true;\n    this.error = null;\n    this.isAuthenticated = false;\n    this.cart$ = this.cartService.cart$;\n  }\n  ngOnInit() {\n    this.isAuthenticated = this.authService.isAuthenticated();\n    // If user is authenticated, load their cart\n    if (this.isAuthenticated) {\n      this.loadCart();\n    } else {\n      this.isLoading = false;\n    }\n  }\n  loadCart() {\n    this.isLoading = true;\n    this.cartService.loadCart();\n    // Subscribe to cart changes to know when loading is complete\n    const subscription = this.cart$.subscribe({\n      next: cart => {\n        this.isLoading = false;\n        subscription.unsubscribe();\n      },\n      error: error => {\n        console.error('Error loading cart:', error);\n        this.error = 'Failed to load your cart. Please try again later.';\n        this.isLoading = false;\n        subscription.unsubscribe();\n      }\n    });\n  }\n  onQuantityChanged(item) {\n    // The cart service will update the cart$ observable\n    console.log(`Quantity changed for ${item.name}`);\n  }\n  onItemRemoved(item) {\n    // The cart service will update the cart$ observable\n    console.log(`Removed ${item.name} from cart`);\n  }\n  clearCart() {\n    if (confirm('Are you sure you want to clear your cart?')) {\n      this.cartService.clearCart().subscribe({\n        error: error => {\n          console.error('Error clearing cart:', error);\n        }\n      });\n    }\n  }\n  proceedToCheckout() {\n    if (this.isAuthenticated) {\n      this.router.navigate(['/checkout']);\n    } else {\n      // Redirect to login with return URL\n      this.router.navigate(['/login'], {\n        queryParams: {\n          returnUrl: '/checkout'\n        }\n      });\n    }\n  }\n  continueShopping() {\n    this.router.navigate(['/products']);\n  }\n};\nCartComponent = __decorate([Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})], CartComponent);","map":{"version":3,"names":["Component","CartComponent","constructor","cartService","authService","router","isLoading","error","isAuthenticated","cart$","ngOnInit","loadCart","subscription","subscribe","next","cart","unsubscribe","console","onQuantityChanged","item","log","name","onItemRemoved","clearCart","confirm","proceedToCheckout","navigate","queryParams","returnUrl","continueShopping","__decorate","selector","templateUrl","styleUrls"],"sources":["/workspace/simplewebsite/frontend/src/app/pages/cart/cart.component.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Cart, CartItem } from '../../models/cart.model';\nimport { CartService } from '../../services/cart.service';\nimport { AuthService } from '../../services/auth.service';\n\n@Component({\n  selector: 'app-cart',\n  templateUrl: './cart.component.html',\n  styleUrls: ['./cart.component.scss']\n})\nexport class CartComponent implements OnInit {\n  cart$: Observable<Cart | null>;\n  isLoading = true;\n  error: string | null = null;\n  isAuthenticated = false;\n  \n  constructor(\n    private cartService: CartService,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.cart$ = this.cartService.cart$;\n  }\n\n  ngOnInit(): void {\n    this.isAuthenticated = this.authService.isAuthenticated();\n    \n    // If user is authenticated, load their cart\n    if (this.isAuthenticated) {\n      this.loadCart();\n    } else {\n      this.isLoading = false;\n    }\n  }\n  \n  loadCart(): void {\n    this.isLoading = true;\n    \n    this.cartService.loadCart();\n    \n    // Subscribe to cart changes to know when loading is complete\n    const subscription = this.cart$.subscribe({\n      next: (cart) => {\n        this.isLoading = false;\n        subscription.unsubscribe();\n      },\n      error: (error) => {\n        console.error('Error loading cart:', error);\n        this.error = 'Failed to load your cart. Please try again later.';\n        this.isLoading = false;\n        subscription.unsubscribe();\n      }\n    });\n  }\n  \n  onQuantityChanged(item: CartItem): void {\n    // The cart service will update the cart$ observable\n    console.log(`Quantity changed for ${item.name}`);\n  }\n  \n  onItemRemoved(item: CartItem): void {\n    // The cart service will update the cart$ observable\n    console.log(`Removed ${item.name} from cart`);\n  }\n  \n  clearCart(): void {\n    if (confirm('Are you sure you want to clear your cart?')) {\n      this.cartService.clearCart().subscribe({\n        error: (error) => {\n          console.error('Error clearing cart:', error);\n        }\n      });\n    }\n  }\n  \n  proceedToCheckout(): void {\n    if (this.isAuthenticated) {\n      this.router.navigate(['/checkout']);\n    } else {\n      // Redirect to login with return URL\n      this.router.navigate(['/login'], { \n        queryParams: { returnUrl: '/checkout' }\n      });\n    }\n  }\n  \n  continueShopping(): void {\n    this.router.navigate(['/products']);\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";AA6MA,SAASA,SAAS,QAAgB,eAAe;AAY1C,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAMxBC,YACUC,WAAwB,EACxBC,WAAwB,EACxBC,MAAc;IAFd,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IAPhB,KAAAC,SAAS,GAAG,IAAI;IAChB,KAAAC,KAAK,GAAkB,IAAI;IAC3B,KAAAC,eAAe,GAAG,KAAK;IAOrB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACN,WAAW,CAACM,KAAK;EACrC;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACF,eAAe,GAAG,IAAI,CAACJ,WAAW,CAACI,eAAe,EAAE;IAEzD;IACA,IAAI,IAAI,CAACA,eAAe,EAAE;MACxB,IAAI,CAACG,QAAQ,EAAE;KAChB,MAAM;MACL,IAAI,CAACL,SAAS,GAAG,KAAK;;EAE1B;EAEAK,QAAQA,CAAA;IACN,IAAI,CAACL,SAAS,GAAG,IAAI;IAErB,IAAI,CAACH,WAAW,CAACQ,QAAQ,EAAE;IAE3B;IACA,MAAMC,YAAY,GAAG,IAAI,CAACH,KAAK,CAACI,SAAS,CAAC;MACxCC,IAAI,EAAGC,IAAI,IAAI;QACb,IAAI,CAACT,SAAS,GAAG,KAAK;QACtBM,YAAY,CAACI,WAAW,EAAE;MAC5B,CAAC;MACDT,KAAK,EAAGA,KAAK,IAAI;QACfU,OAAO,CAACV,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,IAAI,CAACA,KAAK,GAAG,mDAAmD;QAChE,IAAI,CAACD,SAAS,GAAG,KAAK;QACtBM,YAAY,CAACI,WAAW,EAAE;MAC5B;KACD,CAAC;EACJ;EAEAE,iBAAiBA,CAACC,IAAc;IAC9B;IACAF,OAAO,CAACG,GAAG,CAAC,wBAAwBD,IAAI,CAACE,IAAI,EAAE,CAAC;EAClD;EAEAC,aAAaA,CAACH,IAAc;IAC1B;IACAF,OAAO,CAACG,GAAG,CAAC,WAAWD,IAAI,CAACE,IAAI,YAAY,CAAC;EAC/C;EAEAE,SAASA,CAAA;IACP,IAAIC,OAAO,CAAC,2CAA2C,CAAC,EAAE;MACxD,IAAI,CAACrB,WAAW,CAACoB,SAAS,EAAE,CAACV,SAAS,CAAC;QACrCN,KAAK,EAAGA,KAAK,IAAI;UACfU,OAAO,CAACV,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C;OACD,CAAC;;EAEN;EAEAkB,iBAAiBA,CAAA;IACf,IAAI,IAAI,CAACjB,eAAe,EAAE;MACxB,IAAI,CAACH,MAAM,CAACqB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;KACpC,MAAM;MACL;MACA,IAAI,CAACrB,MAAM,CAACqB,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;QAC/BC,WAAW,EAAE;UAAEC,SAAS,EAAE;QAAW;OACtC,CAAC;;EAEN;EAEAC,gBAAgBA,CAAA;IACd,IAAI,CAACxB,MAAM,CAACqB,QAAQ,CAAC,CAAC,WAAW,CAAC,CAAC;EACrC;CACD;AA/EYzB,aAAa,GAAA6B,UAAA,EALzB9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC,C,EACWhC,aAAa,CA+EzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}