{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport class ErrorInterceptor {\n  constructor() {}\n  intercept(request, next) {\n    return next.handle(request).pipe(catchError(error => {\n      let errorMessage = 'An unknown error occurred';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        if (error.status === 0) {\n          errorMessage = 'Unable to connect to the server. Please check your internet connection.';\n        } else {\n          errorMessage = error.error?.message || `Error Code: ${error.status}, Message: ${error.message}`;\n        }\n      }\n      // Log the error\n      console.error('HTTP Error:', errorMessage, error);\n      // Return the error with a custom message\n      return throwError(() => ({\n        status: error.status,\n        message: errorMessage,\n        error: error.error\n      }));\n    }));\n  }\n  static {\n    this.ɵfac = function ErrorInterceptor_Factory(t) {\n      return new (t || ErrorInterceptor)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ErrorInterceptor,\n      factory: ErrorInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","ErrorInterceptor","constructor","intercept","request","next","handle","pipe","error","errorMessage","ErrorEvent","message","status","console","factory","ɵfac"],"sources":["/workspace/simplewebsite/frontend/src/app/interceptors/error.interceptor.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor() {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        let errorMessage = 'An unknown error occurred';\n        \n        if (error.error instanceof ErrorEvent) {\n          // Client-side error\n          errorMessage = `Error: ${error.error.message}`;\n        } else {\n          // Server-side error\n          if (error.status === 0) {\n            errorMessage = 'Unable to connect to the server. Please check your internet connection.';\n          } else {\n            errorMessage = error.error?.message || `Error Code: ${error.status}, Message: ${error.message}`;\n          }\n        }\n        \n        // Log the error\n        console.error('HTTP Error:', errorMessage, error);\n        \n        // Return the error with a custom message\n        return throwError(() => ({\n          status: error.status,\n          message: errorMessage,\n          error: error.error\n        }));\n      })\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAgMA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;AAG3C,OAAM,MAAOC,gBAAgB;EAC3BC,YAAA,GAAe;EAEfC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC,CAACG,IAAI,CAC9BP,UAAU,CAAEQ,KAAwB,IAAI;MACtC,IAAIC,YAAY,GAAG,2BAA2B;MAE9C,IAAID,KAAK,CAACA,KAAK,YAAYE,UAAU,EAAE;QACrC;QACAD,YAAY,GAAG,UAAUD,KAAK,CAACA,KAAK,CAACG,OAAO,EAAE;OAC/C,MAAM;QACL;QACA,IAAIH,KAAK,CAACI,MAAM,KAAK,CAAC,EAAE;UACtBH,YAAY,GAAG,yEAAyE;SACzF,MAAM;UACLA,YAAY,GAAGD,KAAK,CAACA,KAAK,EAAEG,OAAO,IAAI,eAAeH,KAAK,CAACI,MAAM,cAAcJ,KAAK,CAACG,OAAO,EAAE;;;MAInG;MACAE,OAAO,CAACL,KAAK,CAAC,aAAa,EAAEC,YAAY,EAAED,KAAK,CAAC;MAEjD;MACA,OAAOT,UAAU,CAAC,OAAO;QACvBa,MAAM,EAAEJ,KAAK,CAACI,MAAM;QACpBD,OAAO,EAAEF,YAAY;QACrBD,KAAK,EAAEA,KAAK,CAACA;OACd,CAAC,CAAC;IACL,CAAC,CAAC,CACH;EACH;;;uBA/BWP,gBAAgB;IAAA;EAAA;;;aAAhBA,gBAAgB;MAAAa,OAAA,EAAhBb,gBAAgB,CAAAc;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}