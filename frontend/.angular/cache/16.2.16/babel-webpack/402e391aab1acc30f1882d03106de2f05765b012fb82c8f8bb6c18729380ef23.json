{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class OrderService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiBaseUrl}/orders`;\n  }\n  // Create a new order\n  createOrder(orderData) {\n    return this.http.post(this.apiUrl, orderData);\n  }\n  // Get order by ID\n  getOrder(orderId) {\n    return this.http.get(`${this.apiUrl}/${orderId}`);\n  }\n  // Get all orders for current user\n  getUserOrders() {\n    const user = this.authService.currentUserValue;\n    if (!user) {\n      throw new Error('User must be logged in to view orders');\n    }\n    return this.http.get(`${environment.apiBaseUrl}/customers/${user.customerId}/orders`);\n  }\n  // Update order status (admin only)\n  updateOrderStatus(orderId, status) {\n    return this.http.put(`${this.apiUrl}/${orderId}`, {\n      status\n    });\n  }\n  // Cancel order\n  cancelOrder(orderId) {\n    return this.http.put(`${this.apiUrl}/${orderId}/cancel`, {});\n  }\n  static {\n    this.ɵfac = function OrderService_Factory(t) {\n      return new (t || OrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: OrderService,\n      factory: OrderService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","OrderService","constructor","http","authService","apiUrl","apiBaseUrl","createOrder","orderData","post","getOrder","orderId","get","getUserOrders","user","currentUserValue","Error","customerId","updateOrderStatus","status","put","cancelOrder","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["/workspace/simplewebsite/frontend/src/app/services/order.service.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Order } from '../models/order.model';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class OrderService {\n  private apiUrl = `${environment.apiBaseUrl}/orders`;\n  \n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) { }\n  \n  // Create a new order\n  createOrder(orderData: Partial<Order>): Observable<Order> {\n    return this.http.post<Order>(this.apiUrl, orderData);\n  }\n  \n  // Get order by ID\n  getOrder(orderId: string): Observable<Order> {\n    return this.http.get<Order>(`${this.apiUrl}/${orderId}`);\n  }\n  \n  // Get all orders for current user\n  getUserOrders(): Observable<Order[]> {\n    const user = this.authService.currentUserValue;\n    if (!user) {\n      throw new Error('User must be logged in to view orders');\n    }\n    \n    return this.http.get<Order[]>(`${environment.apiBaseUrl}/customers/${user.customerId}/orders`);\n  }\n  \n  // Update order status (admin only)\n  updateOrderStatus(orderId: string, status: string): Observable<Order> {\n    return this.http.put<Order>(`${this.apiUrl}/${orderId}`, { status });\n  }\n  \n  // Cancel order\n  cancelOrder(orderId: string): Observable<Order> {\n    return this.http.put<Order>(`${this.apiUrl}/${orderId}/cancel`, {});\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"AAqDA,SAASA,WAAW,QAAQ,gCAAgC;;;;AAO5D,OAAM,MAAOC,YAAY;EAGvBC,YACUC,IAAgB,EAChBC,WAAwB;IADxB,KAAAD,IAAI,GAAJA,IAAI;IACJ,KAAAC,WAAW,GAAXA,WAAW;IAJb,KAAAC,MAAM,GAAG,GAAGL,WAAW,CAACM,UAAU,SAAS;EAK/C;EAEJ;EACAC,WAAWA,CAACC,SAAyB;IACnC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAQ,IAAI,CAACJ,MAAM,EAAEG,SAAS,CAAC;EACtD;EAEA;EACAE,QAAQA,CAACC,OAAe;IACtB,OAAO,IAAI,CAACR,IAAI,CAACS,GAAG,CAAQ,GAAG,IAAI,CAACP,MAAM,IAAIM,OAAO,EAAE,CAAC;EAC1D;EAEA;EACAE,aAAaA,CAAA;IACX,MAAMC,IAAI,GAAG,IAAI,CAACV,WAAW,CAACW,gBAAgB;IAC9C,IAAI,CAACD,IAAI,EAAE;MACT,MAAM,IAAIE,KAAK,CAAC,uCAAuC,CAAC;;IAG1D,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAAU,GAAGZ,WAAW,CAACM,UAAU,cAAcQ,IAAI,CAACG,UAAU,SAAS,CAAC;EAChG;EAEA;EACAC,iBAAiBA,CAACP,OAAe,EAAEQ,MAAc;IAC/C,OAAO,IAAI,CAAChB,IAAI,CAACiB,GAAG,CAAQ,GAAG,IAAI,CAACf,MAAM,IAAIM,OAAO,EAAE,EAAE;MAAEQ;IAAM,CAAE,CAAC;EACtE;EAEA;EACAE,WAAWA,CAACV,OAAe;IACzB,OAAO,IAAI,CAACR,IAAI,CAACiB,GAAG,CAAQ,GAAG,IAAI,CAACf,MAAM,IAAIM,OAAO,SAAS,EAAE,EAAE,CAAC;EACrE;;;uBApCWV,YAAY,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAAZ1B,YAAY;MAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}