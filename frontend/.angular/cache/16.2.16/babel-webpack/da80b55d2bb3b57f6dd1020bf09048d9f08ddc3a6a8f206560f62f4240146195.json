{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.apiUrl = `${environment.apiBaseUrl}/customers`;\n    this.tokenKey = 'auth_token';\n    this.userKey = 'current_user';\n    this.currentUserSubject = new BehaviorSubject(this.getUserFromStorage());\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  // Get current user value\n  get currentUserValue() {\n    return this.currentUserSubject.value;\n  }\n  // Register new user\n  register(userData) {\n    return this.http.post(`${this.apiUrl}`, userData).pipe(tap(response => {\n      this.setSession(response);\n      this.currentUserSubject.next(response.customer);\n    }), catchError(error => {\n      return throwError(() => new Error(error.error?.message || 'Registration failed'));\n    }));\n  }\n  // Login user\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(tap(response => {\n      this.setSession(response);\n      this.currentUserSubject.next(response.customer);\n    }), catchError(error => {\n      return throwError(() => new Error(error.error?.message || 'Login failed'));\n    }));\n  }\n  // Logout user\n  logout() {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = this.getToken();\n    // Check if token exists and is not expired\n    return !!token; // In a real app, you would also check if the token is expired\n  }\n  // Get authentication token\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n  // Store authentication data\n  setSession(authResult) {\n    localStorage.setItem(this.tokenKey, authResult.token);\n    localStorage.setItem(this.userKey, JSON.stringify(authResult.customer));\n  }\n  // Get user from storage\n  getUserFromStorage() {\n    const user = localStorage.getItem(this.userKey);\n    return user ? JSON.parse(user) : null;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","throwError","catchError","tap","environment","AuthService","constructor","http","router","apiUrl","apiBaseUrl","tokenKey","userKey","currentUserSubject","getUserFromStorage","currentUser$","asObservable","currentUserValue","value","register","userData","post","pipe","response","setSession","next","customer","error","Error","message","login","email","password","logout","localStorage","removeItem","navigate","isAuthenticated","token","getToken","getItem","authResult","setItem","JSON","stringify","user","parse","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/workspace/simplewebsite/frontend/src/app/services/auth.service.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment';\nimport { Customer } from '../models/customer.model';\n\ninterface AuthResponse {\n  token: string;\n  customer: Customer;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiBaseUrl}/customers`;\n  private tokenKey = 'auth_token';\n  private userKey = 'current_user';\n  \n  private currentUserSubject: BehaviorSubject<Customer | null>;\n  public currentUser$: Observable<Customer | null>;\n  \n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    this.currentUserSubject = new BehaviorSubject<Customer | null>(this.getUserFromStorage());\n    this.currentUser$ = this.currentUserSubject.asObservable();\n  }\n  \n  // Get current user value\n  public get currentUserValue(): Customer | null {\n    return this.currentUserSubject.value;\n  }\n  \n  // Register new user\n  register(userData: Partial<Customer>): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}`, userData).pipe(\n      tap(response => {\n        this.setSession(response);\n        this.currentUserSubject.next(response.customer);\n      }),\n      catchError(error => {\n        return throwError(() => new Error(error.error?.message || 'Registration failed'));\n      })\n    );\n  }\n  \n  // Login user\n  login(email: string, password: string): Observable<AuthResponse> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password }).pipe(\n      tap(response => {\n        this.setSession(response);\n        this.currentUserSubject.next(response.customer);\n      }),\n      catchError(error => {\n        return throwError(() => new Error(error.error?.message || 'Login failed'));\n      })\n    );\n  }\n  \n  // Logout user\n  logout(): void {\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.userKey);\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/login']);\n  }\n  \n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    // Check if token exists and is not expired\n    return !!token; // In a real app, you would also check if the token is expired\n  }\n  \n  // Get authentication token\n  getToken(): string | null {\n    return localStorage.getItem(this.tokenKey);\n  }\n  \n  // Store authentication data\n  private setSession(authResult: AuthResponse): void {\n    localStorage.setItem(this.tokenKey, authResult.token);\n    localStorage.setItem(this.userKey, JSON.stringify(authResult.customer));\n  }\n  \n  // Get user from storage\n  private getUserFromStorage(): Customer | null {\n    const user = localStorage.getItem(this.userKey);\n    return user ? JSON.parse(user) : null;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}