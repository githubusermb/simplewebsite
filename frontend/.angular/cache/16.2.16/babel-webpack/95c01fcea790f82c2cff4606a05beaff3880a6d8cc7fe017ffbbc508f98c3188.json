{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./auth.service\";\nexport class CartService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = `${environment.apiBaseUrl}/carts`;\n    this.cartSubject = new BehaviorSubject(null);\n    this.cart$ = this.cartSubject.asObservable();\n    // Load cart when user logs in\n    this.authService.currentUser$.subscribe(user => {\n      if (user) {\n        this.loadCart();\n      } else {\n        this.cartSubject.next(null);\n      }\n    });\n  }\n  // Get current cart value\n  get currentCartValue() {\n    return this.cartSubject.value;\n  }\n  // Load user's active cart\n  loadCart() {\n    const user = this.authService.currentUserValue;\n    if (user) {\n      this.http.get(`${this.apiUrl}/customer/${user.customerId}/active`).subscribe({\n        next: cart => {\n          this.cartSubject.next(cart);\n        },\n        error: error => {\n          console.error('Error loading cart:', error);\n          // If no cart exists, create a new one\n          if (error.status === 404) {\n            this.createCart();\n          }\n        }\n      });\n    }\n  }\n  // Create a new cart\n  createCart() {\n    const user = this.authService.currentUserValue;\n    if (!user) {\n      throw new Error('User must be logged in to create a cart');\n    }\n    return this.http.post(this.apiUrl, {\n      customerId: user.customerId\n    }).pipe(tap(cart => {\n      this.cartSubject.next(cart);\n    }));\n  }\n  // Get cart by ID\n  getCart(cartId) {\n    return this.http.get(`${this.apiUrl}/${cartId}`);\n  }\n  // Add item to cart\n  addToCart(product, quantity = 1) {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    const item = {\n      productId: product.productId,\n      quantity: quantity\n    };\n    return this.http.post(`${this.apiUrl}/${cart.cartId}/items`, item).pipe(tap(updatedCart => {\n      this.cartSubject.next(updatedCart);\n    }));\n  }\n  // Update cart item quantity\n  updateCartItem(productId, quantity) {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    return this.http.put(`${this.apiUrl}/${cart.cartId}/items/${productId}`, {\n      quantity\n    }).pipe(tap(updatedCart => {\n      this.cartSubject.next(updatedCart);\n    }));\n  }\n  // Remove item from cart\n  removeFromCart(productId) {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    return this.http.delete(`${this.apiUrl}/${cart.cartId}/items/${productId}`).pipe(tap(updatedCart => {\n      this.cartSubject.next(updatedCart);\n    }));\n  }\n  // Clear cart\n  clearCart() {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    return this.http.delete(`${this.apiUrl}/${cart.cartId}/items`).pipe(tap(emptyCart => {\n      this.cartSubject.next(emptyCart);\n    }));\n  }\n  static {\n    this.ɵfac = function CartService_Factory(t) {\n      return new (t || CartService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CartService,\n      factory: CartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","CartService","constructor","http","authService","apiUrl","apiBaseUrl","cartSubject","cart$","asObservable","currentUser$","subscribe","user","loadCart","next","currentCartValue","value","currentUserValue","get","customerId","cart","error","console","status","createCart","Error","post","pipe","getCart","cartId","addToCart","product","quantity","item","productId","updatedCart","updateCartItem","put","removeFromCart","delete","clearCart","emptyCart","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["/workspace/simplewebsite/frontend/src/app/services/cart.service.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Cart, CartItem } from '../models/cart.model';\nimport { Product } from '../models/product.model';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CartService {\n  private apiUrl = `${environment.apiBaseUrl}/carts`;\n  private cartSubject = new BehaviorSubject<Cart | null>(null);\n  public cart$ = this.cartSubject.asObservable();\n  \n  constructor(\n    private http: HttpClient,\n    private authService: AuthService\n  ) {\n    // Load cart when user logs in\n    this.authService.currentUser$.subscribe(user => {\n      if (user) {\n        this.loadCart();\n      } else {\n        this.cartSubject.next(null);\n      }\n    });\n  }\n  \n  // Get current cart value\n  public get currentCartValue(): Cart | null {\n    return this.cartSubject.value;\n  }\n  \n  // Load user's active cart\n  loadCart(): void {\n    const user = this.authService.currentUserValue;\n    if (user) {\n      this.http.get<Cart>(`${this.apiUrl}/customer/${user.customerId}/active`)\n        .subscribe({\n          next: (cart) => {\n            this.cartSubject.next(cart);\n          },\n          error: (error) => {\n            console.error('Error loading cart:', error);\n            // If no cart exists, create a new one\n            if (error.status === 404) {\n              this.createCart();\n            }\n          }\n        });\n    }\n  }\n  \n  // Create a new cart\n  createCart(): Observable<Cart> {\n    const user = this.authService.currentUserValue;\n    if (!user) {\n      throw new Error('User must be logged in to create a cart');\n    }\n    \n    return this.http.post<Cart>(this.apiUrl, { customerId: user.customerId }).pipe(\n      tap(cart => {\n        this.cartSubject.next(cart);\n      })\n    );\n  }\n  \n  // Get cart by ID\n  getCart(cartId: string): Observable<Cart> {\n    return this.http.get<Cart>(`${this.apiUrl}/${cartId}`);\n  }\n  \n  // Add item to cart\n  addToCart(product: Product, quantity: number = 1): Observable<Cart> {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    \n    const item = {\n      productId: product.productId,\n      quantity: quantity\n    };\n    \n    return this.http.post<Cart>(`${this.apiUrl}/${cart.cartId}/items`, item).pipe(\n      tap(updatedCart => {\n        this.cartSubject.next(updatedCart);\n      })\n    );\n  }\n  \n  // Update cart item quantity\n  updateCartItem(productId: string, quantity: number): Observable<Cart> {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    \n    return this.http.put<Cart>(`${this.apiUrl}/${cart.cartId}/items/${productId}`, { quantity }).pipe(\n      tap(updatedCart => {\n        this.cartSubject.next(updatedCart);\n      })\n    );\n  }\n  \n  // Remove item from cart\n  removeFromCart(productId: string): Observable<Cart> {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    \n    return this.http.delete<Cart>(`${this.apiUrl}/${cart.cartId}/items/${productId}`).pipe(\n      tap(updatedCart => {\n        this.cartSubject.next(updatedCart);\n      })\n    );\n  }\n  \n  // Clear cart\n  clearCart(): Observable<Cart> {\n    const cart = this.currentCartValue;\n    if (!cart) {\n      throw new Error('No active cart found');\n    }\n    \n    return this.http.delete<Cart>(`${this.apiUrl}/${cart.cartId}/items`).pipe(\n      tap(emptyCart => {\n        this.cartSubject.next(emptyCart);\n      })\n    );\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}