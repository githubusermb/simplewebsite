{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nexport let RegisterComponent = class RegisterComponent {\n  constructor(fb, authService, cartService, route, router) {\n    this.fb = fb;\n    this.authService = authService;\n    this.cartService = cartService;\n    this.route = route;\n    this.router = router;\n    this.isSubmitting = false;\n    this.error = null;\n    this.returnUrl = '/';\n    // Initialize form\n    this.registerForm = this.fb.group({\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n    // Redirect to home if already logged in\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/']);\n    }\n  }\n  ngOnInit() {\n    // Get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  // Custom validator to check if passwords match\n  passwordMatchValidator(formGroup) {\n    const password = formGroup.get('password')?.value;\n    const confirmPassword = formGroup.get('confirmPassword')?.value;\n    if (password !== confirmPassword) {\n      formGroup.get('confirmPassword')?.setErrors({\n        passwordMismatch: true\n      });\n      return {\n        passwordMismatch: true\n      };\n    } else {\n      formGroup.get('confirmPassword')?.setErrors(null);\n      return null;\n    }\n  }\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    this.isSubmitting = true;\n    this.error = null;\n    const {\n      firstName,\n      lastName,\n      email,\n      password\n    } = this.registerForm.value;\n    const userData = {\n      firstName,\n      lastName,\n      email,\n      password\n    };\n    this.authService.register(userData).subscribe({\n      next: () => {\n        this.isSubmitting = false;\n        // Auto login after registration\n        this.authService.login(email, password).subscribe({\n          next: () => {\n            // Initialize empty cart for new user\n            this.cartService.loadCart();\n            // Navigate to return url\n            this.router.navigateByUrl(this.returnUrl);\n          }\n        });\n      },\n      error: error => {\n        this.isSubmitting = false;\n        this.error = error.message || 'Registration failed. Please try again.';\n      }\n    });\n  }\n  // Form getters for validation\n  get f() {\n    return this.registerForm.controls;\n  }\n};\nRegisterComponent = __decorate([Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})], RegisterComponent);","map":{"version":3,"names":["Component","Validators","RegisterComponent","constructor","fb","authService","cartService","route","router","isSubmitting","error","returnUrl","registerForm","group","firstName","required","lastName","email","password","minLength","confirmPassword","validators","passwordMatchValidator","isAuthenticated","navigate","ngOnInit","snapshot","queryParams","formGroup","get","value","setErrors","passwordMismatch","onSubmit","invalid","userData","register","subscribe","next","login","loadCart","navigateByUrl","message","f","controls","__decorate","selector","templateUrl","styleUrls"],"sources":["/workspace/simplewebsite/frontend/src/app/pages/register/register.component.ts"],"sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthService } from '../../services/auth.service';\nimport { CartService } from '../../services/cart.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm: FormGroup;\n  isSubmitting = false;\n  error: string | null = null;\n  returnUrl: string = '/';\n  \n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private cartService: CartService,\n    private route: ActivatedRoute,\n    private router: Router\n  ) {\n    // Initialize form\n    this.registerForm = this.fb.group({\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n    \n    // Redirect to home if already logged in\n    if (this.authService.isAuthenticated()) {\n      this.router.navigate(['/']);\n    }\n  }\n\n  ngOnInit(): void {\n    // Get return url from route parameters or default to '/'\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n  \n  // Custom validator to check if passwords match\n  passwordMatchValidator(formGroup: FormGroup) {\n    const password = formGroup.get('password')?.value;\n    const confirmPassword = formGroup.get('confirmPassword')?.value;\n    \n    if (password !== confirmPassword) {\n      formGroup.get('confirmPassword')?.setErrors({ passwordMismatch: true });\n      return { passwordMismatch: true };\n    } else {\n      formGroup.get('confirmPassword')?.setErrors(null);\n      return null;\n    }\n  }\n  \n  onSubmit(): void {\n    if (this.registerForm.invalid) {\n      return;\n    }\n    \n    this.isSubmitting = true;\n    this.error = null;\n    \n    const { firstName, lastName, email, password } = this.registerForm.value;\n    \n    const userData = {\n      firstName,\n      lastName,\n      email,\n      password\n    };\n    \n    this.authService.register(userData).subscribe({\n      next: () => {\n        this.isSubmitting = false;\n        \n        // Auto login after registration\n        this.authService.login(email, password).subscribe({\n          next: () => {\n            // Initialize empty cart for new user\n            this.cartService.loadCart();\n            \n            // Navigate to return url\n            this.router.navigateByUrl(this.returnUrl);\n          }\n        });\n      },\n      error: (error) => {\n        this.isSubmitting = false;\n        this.error = error.message || 'Registration failed. Please try again.';\n      }\n    });\n  }\n  \n  // Form getters for validation\n  get f() { return this.registerForm.controls; }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}